#! /usr/bin/env python3
from distutils.util import execute
import imp
from ntpath import join
import sys
import copy
from turtle import position
from unittest import result
from io import BytesIO
from venv import create

from sklearn import tree
import rospy
from std_msgs.msg import Header
from std_msgs.msg import Duration
from trajectory_msgs.msg import JointTrajectoryPoint
from trajectory_msgs.msg import JointTrajectory
from moveit_msgs.msg import RobotTrajectory
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
from sensor_msgs.msg import JointState
import matplotlib.pyplot as plt

def generateResults(initial_pose_joint_space, goal_pose_joint_space, planner_pipeline_id):

    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node("move_group_demo", anonymous= True)
    
    robot = moveit_commander.RobotCommander()
    group_name = "manipulator"
    group = moveit_commander.MoveGroupCommander(group_name)

    display_trajectory_pub = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory, queue_size=10)
    planning_frame = group.get_planning_frame()
    print(planning_frame)

    group.set_planning_pipeline_id(planner_pipeline_id)
    
    group.clear_pose_targets()
    group_variable_values = group.get_current_joint_values()
    group.set_max_velocity_scaling_factor(1.0)

    for i in range(len(group_variable_values)):
        group_variable_values[i] = initial_pose_joint_space[i]

    group.go(group_variable_values, wait = True)
    print("Starting trajectory in 1 second")
    rospy.sleep(2)
    group.stop()

    goal_pose_for_plan = JointState()
    goal_pose_for_plan.name = ["shoulder_pan_joint", "shoulder_lift_joint", "elbow_joint", "wrist_1_joint", "wrist_2_joint", "wrist_3_joint"]
    goal_pose_for_plan.velocity = [0,0,0,0,0,0]
    goal_pose_for_plan.position = [1.01352, 0.277848, -1.90593, -1.52476, 1.34359, 2.25875]
    for i in range(len(group_variable_values)):
        group_variable_values[i] = goal_pose_joint_space[i]

    plan_moveit_planner = group.plan(goal_pose_for_plan)
    group.execute(plan_moveit_planner[1])
    # print(plan_moveit_planner[1])
    # group.execute(plan_moveit_planner[1]) 

    traj_time = (plan_moveit_planner[1].joint_trajectory.points[-1].time_from_start)
    return plan_moveit_planner

    # gomp_plan = create_robot_trajectory()
    # print(gomp_plan)
    
    # group.execute(gomp_plan)

def create_robot_trajectory():
    computed_trajectory = [[-0.499, -0.499, -0.499, -0.4915, -0.4712, -0.4347, -0.3803, -0.3077, -0.218, -0.1134, 0.0032, 0.1281, 0.2573, 0.3864, 0.5113, 0.6279, 0.7325, 0.8222, 0.8948, 0.9493, 0.9858, 1.0061, 1.0135, -0.0, -0.0, 0.0747, 0.2028, 0.3651, 0.5445, 0.726, 0.8968, 1.0462, 1.1658, 1.2491, 1.2918, 1.2918, 1.2491, 1.1658, 1.0462, 0.8968, 0.726, 0.5445, 0.3651, 0.2028, 0.0747, -0.0, -0.0, 0.7473, 1.2812, 1.6228, 1.7936, 1.8149, 1.7082, 1.4946, 1.1957, 0.8327, 0.427, 0.0, -0.427, -0.8327, -1.1957, -1.4946, -1.7082, -1.8149, -1.7936, -1.6228, -1.2812, -0.7473, 0.0], [0.5802, 0.5802, 0.5802, 0.5787, 0.5746, 0.5673, 0.5564, 0.5419, 0.524, 0.5031, 0.4798, 0.4548, 0.429, 0.4032, 0.3782, 0.3549, 0.334, 0.3161, 0.3016, 0.2907, 0.2834, 0.2793, 0.2778, 0.0, 0.0, -0.0149, -0.0405, -0.073, -0.1088, -0.1451, -0.1792, -0.2091, -0.233, -0.2497, -0.2582, -0.2582, -0.2497, -0.233, -0.2091, -0.1792, -0.1451, -0.1088, -0.073, -0.0405, -0.0149, 0.0, 0.0, -0.1494, -0.2561, -0.3244, -0.3585, -0.3628, -0.3414, -0.2987, -0.239, -0.1664, -0.0854, -0.0, 0.0854, 0.1664, 0.239, 0.2987, 0.3414, 0.3628, 0.3585, 0.3244, 0.2561, 0.1494, -0.0], [-1.6926, -1.6926, -1.6926, -1.6936, -1.6965, -1.7017, -1.7093, -1.7196, -1.7322, -1.747, -1.7634, -1.781, -1.7993, -1.8175, -1.8351, -1.8515, -1.8663, -1.8789, -1.8892, -1.8969, -1.902, -1.9049, -1.9059, 0.0, 0.0, -0.0105, -0.0286, -0.0515, -0.0768, -0.1024, -0.1265, -0.1476, -0.1644, -0.1762, -0.1822, -0.1822, -0.1762, -0.1644, -0.1476, -0.1265, -0.1024, -0.0768, -0.0515, -0.0286, -0.0105, 0.0, 0.0, -0.1054, -0.1807, -0.2289, -0.253, -0.256, -0.2409, -0.2108, -0.1687, -0.1175, -0.0602, -0.0, 0.0602, 0.1175, 0.1687, 0.2108, 0.2409, 0.256, 0.253, 0.2289, 0.1807, 0.1054, 0.0], [-2.1008, -2.1008, -2.1008, -2.0979, -2.0902, -2.0763, -2.0556, -2.0279, -1.9938, -1.9539, -1.9095, -1.862, -1.8128, -1.7636, -1.716, -1.6716, -1.6318, -1.5976, -1.57, -1.5492, -1.5353, -1.5276, -1.5248, -0.0, -0.0, 0.0285, 0.0772, 0.139, 0.2074, 0.2765, 0.3415, 0.3984, 0.444, 0.4757, 0.492, 0.492, 0.4757, 0.444, 0.3984, 0.3415, 0.2765, 0.2074, 0.1391, 0.0772, 0.0285, -0.0, -0.0, 0.2846, 0.4879, 0.618, 0.6831, 0.6912, 0.6505, 0.5692, 0.4554, 0.3171, 0.1626, 0.0, -0.1626, -0.3171, -0.4554, -0.5692, -0.6505, -0.6912, -0.6831, -0.618, -0.4879, -0.2846, 0.0], [2.8588, 2.8588, 2.8588, 2.8513, 2.831, 2.7944, 2.7399, 2.6671, 2.5773, 2.4725, 2.3557, 2.2306, 2.1012, 1.9718, 1.8467, 1.7299, 1.6251, 1.5352, 1.4625, 1.408, 1.3714, 1.3511, 1.3436, 0.0, 0.0, -0.0749, -0.2032, -0.3658, -0.5454, -0.7273, -0.8984, -1.0481, -1.1679, -1.2513, -1.2941, -1.2941, -1.2513, -1.1679, -1.0481, -0.8984, -0.7273, -0.5454, -0.3658, -0.2032, -0.0749, 0.0, 0.0, -0.7487, -1.2834, -1.6256, -1.7968, -1.8181, -1.7112, -1.4973, -1.1978, -0.8342, -0.4278, -0.0, 0.4278, 0.8342, 1.1978, 1.4973, 1.7112, 1.8181, 1.7968, 1.6256, 1.2834, 0.7487, 0.0], [-0.9249, -0.9249, -0.9249, -0.9022, -0.848, -0.7625, -0.6455, -0.4971, -0.3172, -0.1059, 0.1338, 0.3947, 0.6669, 0.9392, 1.2001, 1.4398, 1.6511, 1.8309, 1.9793, 2.0963, 2.1819, 2.236, 2.2587, 0.0, 0.0001, 0.2266, 0.541, 0.8553, 1.1696, 1.4839, 1.7982, 2.1125, 2.3966, 2.609, 2.7221, 2.7221, 2.609, 2.3966, 2.1124, 1.7981, 1.4839, 1.1696, 0.8553, 0.541, 0.2266, 0.0, 0.0, 2.265, 3.1441, 3.1427, 3.1427, 3.1426, 3.1423, 3.143, 2.8412, 2.1242, 1.131, -0.0001, -1.1312, -2.1243, -2.8413, -3.143, -3.1423, -3.1426, -3.1427, -3.1427, -3.1441, -2.265, -0.0]]
    H = int(len(computed_trajectory[0])/3) - 1
    robot_trajectory = RobotTrajectory()
    joint_trajectory = JointTrajectory()
    joint_trajectory.joint_names = ["shoulder_pan_joint", "shoulder_lift_joint", "elbow_joint", "wrist_1_joint", "wrist_2_joint", "wrist_3_joint"]

    for i in range(H + 1):
        joint_pos_list = []
        joint_vel_list = []
        joint_acc_list = []
        for j in range(len(computed_trajectory)):
            joint_pos_list.append(computed_trajectory[j][i])
            joint_vel_list.append(computed_trajectory[j][i+H+1])
            joint_acc_list.append(computed_trajectory[j][i+2*(H+1)])
        
        joint_trajectory_points = JointTrajectoryPoint()
        joint_trajectory_points.positions = joint_pos_list
        joint_trajectory_points.velocities = joint_vel_list
        joint_trajectory_points.accelerations = joint_acc_list
        # duration = Duration()
        # duration.data.secs = 
        # duration.data.nsecs = ((i*0.1) - int(i*0.1))*1000000000
        joint_trajectory_points.time_from_start.secs = int(i*0.1)
        joint_trajectory_points.time_from_start.nsecs = int(((i*0.1) - int(i*0.1))*1000000000)

        joint_trajectory.points.append(joint_trajectory_points)
    robot_trajectory.joint_trajectory = joint_trajectory

    return robot_trajectory
    print("Bahubaliiiiii")

def visualize(plan):
    file_path = "/home/dalal/cp/trajectory_analysis/ompl_traj_graphs/"
    point_list = plan.joint_trajectory.points
    time_list = []
    position_list = []
    velocity_list = []
    acceleration_list = []

    for i in range(len(point_list)):
        joint_position = point_list[i].positions
        joint_velocity = point_list[i].velocities
        joint_acceleration = point_list[i].accelerations
        time = point_list[i].time_from_start.secs + point_list[i].time_from_start.nsecs/1000000000
        time_list.append(time)
        position_list.append(joint_position)
        velocity_list.append(joint_velocity)
        acceleration_list.append(joint_acceleration)
        print(time)

    #Plotting Joint Angles
    joint_wise_position = [[],[],[],[],[],[]]
    for i in range(len(position_list[0])):
        for j in range(len(position_list)):
            joint_wise_position[i].append(position_list[j][i])

    plt.plot(time_list, joint_wise_position[0], label="Joint " + str(i))


    plt.legend()
    plt.xlabel("Time (sec)")
    plt.ylabel("Angle (rad/sec)")
    plt.savefig(file_path + "joint_ang_ompl_traj.png")
    plt.show() 
    pass    


if __name__ == "__main__":
    joint_states = [[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[1.01352, 0.277848, -1.90593, -1.52476, 1.34359, 2.25875]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[0.348213, 0.215942, -2.08144, -1.30645, 2.00914, 2.23981]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[-0.498901, 0.580142, -1.69258, -2.10085, 2.85886, -0.924978]],[[1.00481, 0.194485, -1.89545, -1.79767, 1.35337, 2.25853],[-0.499057, 0.580086, -1.69254, -2.10067, 2.85868, -0.924874]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[-0.0871657, 0.222748, -1.81682, -1.63439, 2.42606, 1.54355]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[0.357701, 0.297297, -2.12667, -1.53574, 1.98499, 2.23988]],[[1.01355, 0.277931, -1.90589, -1.52474, 1.34364, 2.25883],[1.8527, 0.00332002, -1.99278, -1.13496, -1.00393, 2.67423]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[-0.0872273, 0.222725, -1.81676, -1.63433, 2.42622, 1.5435]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[-0.078454, 0.361567, -1.91644, -1.96672, 2.481, 1.53412]],[[1.01355, 0.277931, -1.90589, -1.52474, 1.34364, 2.25883],[1.69915, -0.0987199, -1.21745, -1.77698, 0.700767, 2.33055]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[1.00473, 0.19454, -1.89541, -1.79774, 1.35335, 2.25856]],[[-0.0784138, 0.361667, -1.9165, -1.96676, 2.48106, 1.53409],[1.57613, -0.104935, -1.57728, 1.41422, 0.717136, -0.556697]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[0.348213, 0.215795, -2.08142, -1.30646, 2.00925, 2.23992]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[0.357579, 0.297389, -2.12664, -1.53576, 1.9849, 2.23986]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[0.348191, 0.215815, -2.08142, -1.30638, 2.00916, 2.23978]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[0.348074, 0.215778, -2.08143, -1.30647, 2.00913, 2.23988]],[[1.01355, 0.277931, -1.90589, -1.52474, 1.34364, 2.25883],[-0.499055, 0.580115, -1.6925, -2.1007, 2.85878, -0.925064]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[1.01347, 0.277836, -1.90591, -1.52466, 1.34355, 2.25875]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[1.01352, 0.277847, -1.90587, -1.52475, 1.3436, 2.25874]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[-0.0871261, 0.222708, -1.81672, -1.63429, 2.42617, 1.54343]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[1.85261, 0.00345695, -1.99285, -1.13502, -1.00387, 2.67424]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[1.69914, -0.0987261, -1.21752, -1.7771, 0.700752, 2.33072]],[[-0.0872214, 0.222788, -1.81681, -1.63434, 2.42616, 1.54346],[1.85276, 0.00329273, -1.99272, -1.13502, -1.00402, 2.67427]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[1.69916, -0.0987791, -1.21755, -1.77698, 0.700903, 2.33069]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[-0.49896, 0.58018, -1.69256, -2.1007, 2.85878, -0.92488]],[[0.992515, -0.131606, -2.28278, -0.842995, 0.443223, 0.854179],[-0.283033, 0.255847, -1.09954, -2.22688, 3.55374, -2.11704]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[1.57614, -0.104993, -1.57712, 1.41416, 0.71716, -0.556626]],[[1.01355, 0.277931, -1.90589, -1.52474, 1.34364, 2.25883],[1.57625, -0.104947, -1.57714, 1.41413, 0.717216, -0.556526]],[[1.00481, 0.194485, -1.89545, -1.79767, 1.35337, 2.25853],[1.69903, -0.0986956, -1.21751, -1.77699, 0.700787, 2.33062]],[[0.348137, 0.215842, -2.08148, -1.30646, 2.00921, 2.23984],[1.85263, 0.00336104, -1.99277, -1.13491, -1.00395, 2.6742]],[[0.357616, 0.297383, -2.12672, -1.53583, 1.98497, 2.23993],[-0.498941, 0.580215, -1.69259, -2.10073, 2.85869, -0.924887]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[1.01359, 0.277866, -1.90581, -1.52468, 1.34358, 2.25878]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[1.00477, 0.194486, -1.89549, -1.79774, 1.35341, 2.25855]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[0.357678, 0.29738, -2.12666, -1.53591, 1.98501, 2.24001]],[[-0.0872214, 0.222788, -1.81681, -1.63434, 2.42616, 1.54346],[-0.499057, 0.580115, -1.6926, -2.10073, 2.85878, -0.924874]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[-0.0871268, 0.22275, -1.81673, -1.63432, 2.42607, 1.54354]],[[-0.0872214, 0.222788, -1.81681, -1.63434, 2.42616, 1.54346],[1.69915, -0.0988271, -1.21748, -1.77694, 0.700733, 2.33065]],[[-0.0784138, 0.361667, -1.9165, -1.96676, 2.48106, 1.53409],[1.69916, -0.0988567, -1.21763, -1.77699, 0.700819, 2.33071]],[[0.348137, 0.215842, -2.08148, -1.30646, 2.00921, 2.23984],[-0.49888, 0.580071, -1.69255, -2.10084, 2.85872, -0.924906]],[[0.348137, 0.215842, -2.08148, -1.30646, 2.00921, 2.23984],[1.57627, -0.104948, -1.57718, 1.41414, 0.717258, -0.556679]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[1.00489, 0.194483, -1.89552, -1.79767, 1.35344, 2.25855]],[[0.357616, 0.297383, -2.12672, -1.53583, 1.98497, 2.23993],[1.57615, -0.104961, -1.57715, 1.41413, 0.717134, -0.556558]],[[1.6991, -0.098762, -1.21753, -1.77701, 0.700809, 2.33063],[-0.0783439, 0.361605, -1.91646, -1.96677, 2.48098, 1.53413]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[0.357693, 0.297319, -2.12673, -1.53587, 1.98494, 2.23985]],[[1.8527, 0.00336461, -1.99279, -1.13497, -1.00397, 2.67429],[1.00481, 0.194431, -1.89545, -1.79774, 1.35342, 2.25844]],[[1.00481, 0.194485, -1.89545, -1.79767, 1.35337, 2.25853],[1.85266, 0.00328864, -1.99281, -1.13492, -1.0039, 2.67422]],[[-0.0784138, 0.361667, -1.9165, -1.96676, 2.48106, 1.53409],[1.85275, 0.00328014, -1.99282, -1.13495, -1.00392, 2.67438]],[[1.00481, 0.194485, -1.89545, -1.79767, 1.35337, 2.25853],[1.57613, -0.104943, -1.57721, 1.41423, 0.717229, -0.55653]],[[-0.0784138, 0.361667, -1.9165, -1.96676, 2.48106, 1.53409],[-0.498929, 0.580234, -1.69256, -2.10085, 2.8587, -0.924962]],[[-0.0872214, 0.222788, -1.81681, -1.63434, 2.42616, 1.54346],[1.57616, -0.104848, -1.57711, 1.41424, 0.717287, -0.556511]],[[0.357616, 0.297383, -2.12672, -1.53583, 1.98497, 2.23993],[1.85263, 0.0034626, -1.99273, -1.13502, -1.00395, 2.67427]],[[0.357616, 0.297383, -2.12672, -1.53583, 1.98497, 2.23993],[1.69908, -0.0987964, -1.21749, -1.77691, 0.70082, 2.33066]],[[1.5762, -0.1049, -1.5772, 1.4142, 0.7172, -0.5566],[-0.0784752, 0.361655, -1.91648, -1.96678, 2.48109, 1.53402]],[[-0.498977, 0.580166, -1.69259, -2.10077, 2.85878, -0.924968],[-0.0783967, 0.361675, -1.9165, -1.96668, 2.48104, 1.53419]],[[0.348137, 0.215842, -2.08148, -1.30646, 2.00921, 2.23984],[1.69909, -0.0987135, -1.21749, -1.77696, 0.700808, 2.3306]]]
    print("Results for ompl planning pipeline")
    chomp_results = []
    # for i in range(len(joint_states)):
    #     res = generateResults(joint_states[i][0], joint_states[i][1], "ompl")
    #     chomp_results.append(res)
    res = generateResults(joint_states[0][0], joint_states[0][1], "ompl")


    visualize(res[1])

    print(type(res[1]))